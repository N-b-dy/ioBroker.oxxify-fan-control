{
  "version": 3,
  "sources": ["../../src/lib/DataHelpers.ts"],
  "sourcesContent": ["export class DataHelpers {\n    /**\n     * Parses the provided ioBroker StateValue to a number. This works either for provided numbers or strings.\n     * A string is at first parsed as it is. If this does not work, the first space is used to split the string\n     * and the first part is expected to be a number. In case no space is found, the first characters are parsed\n     * to a number (any one until the first non-numeric char appers).\n     * @param value The ioBroker StateValue which is converted to a number.\n     * @returns The parsed number or NaN in case it could not be parsed.\n     */\n    public static ParseInputNumber(value: ioBroker.StateValue, log: ioBroker.Logger | undefined): number {\n        if (typeof value !== \"number\" && typeof value !== \"string\") {\n            log?.warn(`The value is not from type number or string, but ${typeof value}`);\n            return NaN;\n        }\n\n        let nValue = Number(value);\n\n        if (typeof value === \"string\") {\n            nValue = parseInt(value);\n\n            // Give it a second try, if it was not parsable -> check for the first space as separating character\n            if (isNaN(nValue)) nValue = parseInt(String(value).substring(0, String(value).indexOf(\" \")));\n\n            if (isNaN(nValue)) {\n                log?.warn(`Unable to parse the number from the input value: ${value}`);\n            }\n        }\n\n        return nValue;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASrB,OAAc,iBAAiB,OAA4B,KAA0C;AACjG,QAAI,OAAO,UAAU,YAAY,OAAO,UAAU,UAAU;AACxD,iCAAK,KAAK,oDAAoD,OAAO,KAAK;AAC1E,aAAO;AAAA,IACX;AAEA,QAAI,SAAS,OAAO,KAAK;AAEzB,QAAI,OAAO,UAAU,UAAU;AAC3B,eAAS,SAAS,KAAK;AAGvB,UAAI,MAAM,MAAM;AAAG,iBAAS,SAAS,OAAO,KAAK,EAAE,UAAU,GAAG,OAAO,KAAK,EAAE,QAAQ,GAAG,CAAC,CAAC;AAE3F,UAAI,MAAM,MAAM,GAAG;AACf,mCAAK,KAAK,oDAAoD,KAAK;AAAA,MACvE;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
