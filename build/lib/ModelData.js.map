{
  "version": 3,
  "sources": ["../../src/lib/ModelData.ts"],
  "sourcesContent": ["/**\n * Model class to hold the byte buffer with the protocol data together with the IP address,\n * to which the data is sent.\n */\nexport class DataToSend {\n    /**\n     * Constructor of the class.\n     *\n     * @param data The byte buffer holding the data to send.\n     * @param ipAddress The IP address, to which the data is sent.\n     */\n    public constructor(data: Buffer, ipAddress: string) {\n        this.data = data;\n        this.ipAddress = ipAddress;\n    }\n\n    public data: Buffer;\n    public ipAddress: string;\n}\n\nexport enum ParsingStatus {\n    Ok = 1,\n    WrongHeader,\n    WrongVersion,\n    WrongIdSize,\n    ChecksumError,\n    Undefined,\n}\n\nexport class ParsedData {\n    constructor() {\n        this.strFanId = \"\";\n        this.status = ParsingStatus.Undefined;\n        this.receivedData = [];\n    }\n\n    strFanId: string;\n    status: ParsingStatus;\n    receivedData: ReceivedData[];\n}\n\nexport class ReceivedData {\n    constructor(identifer: string = \"\", value: ioBroker.StateValue = null) {\n        this.strIdentifer = identifer;\n        this.value = value;\n    }\n\n    strIdentifer: string;\n    value: ioBroker.StateValue;\n}\n\nexport type FanRemoteEndpoint = {\n    strIpAddress: string;\n    strPassword: string;\n};\n\nexport class WriteDataModel {\n    constructor(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue) {\n        this.strFanId = strFanId;\n        this.fanData = fanData;\n        this.value = value;\n    }\n\n    strFanId: string;\n    fanData: FanRemoteEndpoint;\n    value: ioBroker.StateValue;\n}\n\ntype ParseResultFunction = (b: Buffer) => ioBroker.StateValue;\n\nexport class FanData {\n    constructor(\n        nSize: number,\n        strIdentifer: string,\n        bIsWritable: boolean,\n        strRole: string,\n        strType: ioBroker.CommonType,\n        name: ioBroker.StringOrTranslated,\n        parseFunction: ParseResultFunction,\n        strUnit?: string,\n        minValue?: number,\n        maxValue?: number,\n    ) {\n        this.nSize = nSize;\n        this.strIdentifer = strIdentifer;\n        this.bIsWritable = bIsWritable;\n        this.strRole = strRole;\n        this.strType = strType;\n        this.strUnit = strUnit;\n        this.name = name;\n        this.parseFunction = parseFunction;\n        this.minValue = minValue;\n        this.maxValue = maxValue;\n    }\n\n    nSize: number;\n    strIdentifer: string;\n    bIsWritable: boolean;\n    strRole: string;\n    strType: ioBroker.CommonType;\n    name: ioBroker.StringOrTranslated;\n\n    parseFunction: ParseResultFunction;\n\n    strUnit: string | undefined;\n    minValue?: number | undefined;\n    maxValue?: number | undefined;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIO,MAAM,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOb,YAAY,MAAc,WAAmB;AAChD,SAAK,OAAO;AACZ,SAAK,YAAY;AAAA,EACrB;AAAA,EAEO;AAAA,EACA;AACX;AAEO,IAAK,gBAAL,kBAAKA,mBAAL;AACH,EAAAA,8BAAA,QAAK,KAAL;AACA,EAAAA,8BAAA;AACA,EAAAA,8BAAA;AACA,EAAAA,8BAAA;AACA,EAAAA,8BAAA;AACA,EAAAA,8BAAA;AANQ,SAAAA;AAAA,GAAA;AASL,MAAM,WAAW;AAAA,EACpB,cAAc;AACV,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,eAAe,CAAC;AAAA,EACzB;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AACJ;AAEO,MAAM,aAAa;AAAA,EACtB,YAAY,YAAoB,IAAI,QAA6B,MAAM;AACnE,SAAK,eAAe;AACpB,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA;AAAA,EACA;AACJ;AAOO,MAAM,eAAe;AAAA,EACxB,YAAY,UAAkB,SAA4B,OAA4B;AAClF,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AACJ;AAIO,MAAM,QAAQ;AAAA,EACjB,YACI,OACA,cACA,aACA,SACA,SACA,MACA,eACA,SACA,UACA,UACF;AACE,SAAK,QAAQ;AACb,SAAK,eAAe;AACpB,SAAK,cAAc;AACnB,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,gBAAgB;AACrB,SAAK,WAAW;AAChB,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AACJ;",
  "names": ["ParsingStatus"]
}
