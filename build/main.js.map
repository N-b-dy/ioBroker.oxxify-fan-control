{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as DateTime from \"date-and-time\";\nimport * as udp from \"dgram\";\nimport * as NTP from \"ntp-time\";\nimport Queue from \"queue-fifo\";\nimport { DataHelpers } from \"./lib/DataHelpers\";\nimport {\n    DataToSend,\n    type FanData,\n    type FanRemoteEndpoint,\n    ParsingStatus,\n    type ReceivedData,\n    WriteDataModel,\n} from \"./lib/ModelData\";\nimport * as Oxxify from \"./lib/OxxifyProtocol\";\n\n/**\n * The main class for this adapter.\n */\nclass OxxifyFanControl extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"oxxify-fan-control\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n\n        this.udpServer = udp.createSocket(\"udp4\");\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator during startup\n        await this.setState(\"info.connection\", false, true);\n\n        this.log.debug(`NTP-Server: ${this.config.ntpServer}`);\n        this.log.debug(`Fan data polling invervall: ${this.config.pollingInterval} seconds`);\n\n        this.ntpClient = new NTP.Client(this.config.ntpServer);\n\n        if (typeof this.config.fans == \"undefined\" || this.config.fans.length == 0) {\n            this.log.error(\"Please set at least one vent in the adapter configuration!\");\n            return;\n        }\n\n        // Remove any old objects and recreate them on adapter start\n        if (this.supportsFeature && this.supportsFeature(\"ADAPTER_DEL_OBJECT_RECURSIVE\")) {\n            await this.delObjectAsync(\"devices\", { recursive: true });\n        }\n\n        await this.extendObject(\"devices\", {\n            type: \"channel\",\n            common: {\n                name: {\n                    en: \"Devices\",\n                    de: \"Ger\u00E4te\",\n                    ru: \"\u0423\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430\",\n                    pt: \"Dispositivos\",\n                    nl: \"Apparaten\",\n                    fr: \"Dispositifs\",\n                    it: \"Dispositivi\",\n                    es: \"Dispositivos\",\n                    pl: \"Urz\u0105dzenia\",\n                    uk: \"\u041F\u0440\u0438\u0441\u0442\u0440\u043E\u0457\",\n                    \"zh-cn\": \"Devices\",\n                },\n                role: undefined,\n            },\n            native: {},\n        });\n\n        const stateDictionary = this.oxxify.StateDictionary;\n\n        this.config.fans.forEach(async element => {\n            this.log.debug(`Fan configured: \"${element.name}\": ${element.id} - ${element.ipaddr}`);\n\n            await this.extendObject(`devices.${element.id}`, {\n                type: \"channel\",\n                common: {\n                    name: element.name,\n                    role: undefined,\n                },\n            });\n\n            stateDictionary.forEach(async (value: FanData) => {\n                await this.extendObject(`devices.${element.id}.${value.strIdentifer}`, {\n                    type: \"state\",\n                    common: {\n                        name: value.name,\n                        role: value.strRole,\n                        read: true,\n                        write: value.bIsWritable,\n                        type: value.strType,\n                        unit: value.strUnit,\n                        min: value.minValue,\n                        max: value.maxValue,\n                    },\n                });\n            });\n        });\n\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        this.subscribeStates(\"devices.*.fan.*\");\n        this.subscribeStates(\"devices.*.sensors.state*\");\n        this.subscribeStates(\"devices.*.sensors.target*\");\n        this.subscribeStates(\"devices.*.system.triggerRtcTimeSync\");\n        this.subscribeStates(\"devices.*.system.resetAlarms\");\n\n        // Emits when any error occurs\n        this.udpServer.on(\"error\", error => {\n            this.log.error(`Error: ${error}`);\n            this.udpServer.close();\n        });\n\n        // Emits on new datagram msg\n        this.udpServer.on(\"message\", async (msg, info) => {\n            // Reset the connection indicator during startup\n            await this.setState(\"info.connection\", true, true);\n\n            this.log.silly(\n                `Received ${msg.length} bytes from ${info.address}:${info.port} - Data: ${msg.toString(\"hex\")}`,\n            );\n\n            const data = this.oxxify.ParseResponseData(msg);\n\n            if (data.status !== ParsingStatus.Ok) {\n                this.log.warn(\n                    `Received frame from IP ${info.address} could not be parsed. Parsing status ${data.status} - data ${msg.toString(\"hex\")}`,\n                );\n            } else {\n                if (data.receivedData.length > 0) {\n                    data.receivedData.forEach(async (value: ReceivedData) => {\n                        await this.setState(`devices.${data.strFanId}.${value.strIdentifer}`, value.value, true);\n                    });\n                }\n            }\n        });\n\n        this.udpServer.bind(4001);\n\n        // emits when socket is ready and listening for datagram msgs\n        this.udpServer.on(\"listening\", () => {\n            const address = this.udpServer.address();\n            const port = address.port;\n            const family = address.family;\n            const ipaddr = address.address;\n            this.log.debug(`Server is listening at: ${ipaddr}:${port} (${family})`);\n\n            this.ReadAllFanData(true);\n        });\n\n        //emits after the socket is closed using socket.close();\n        this.udpServer.on(\"close\", () => {\n            this.log.warn(\"Socket is closed\");\n        });\n\n        this.queneInterval = this.setInterval(() => {\n            if (this.sendQuene.isEmpty() == false) {\n                const sendData = this.sendQuene.dequeue();\n\n                if (sendData != null) {\n                    this.log.silly(`Sending ${sendData.data.toString(\"hex\")} to ${sendData.ipAddress}:${4000}`);\n                    this.udpServer.send(sendData.data, 4000, sendData.ipAddress, err => {\n                        if (err != null) {\n                            this.log.error(err.message);\n                        }\n                    });\n                }\n            }\n        }, 25);\n\n        this.pollingInterval = this.setInterval(() => {\n            this.ReadAllFanData(false);\n        }, this.config.pollingInterval * 1000);\n    }\n\n    /**\n     * Is called when adapter shuts down.\n     *\n     * @param callback The callback, which has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            this.clearInterval(this.queneInterval);\n            this.clearInterval(this.pollingInterval);\n\n            this.udpServer.close();\n\n            callback();\n        } catch (e: any) {\n            this.log.error(e.toString());\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes. Here the subscribed states are dispatched for the\n     * dedicated actions regarding the fans.\n     *\n     * @param strStateIdentifier The state which has changed.\n     * @param state The new value including meta data from ioBroker.\n     */\n    private onStateChange(strStateIdentifier: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.silly(`state ${strStateIdentifier} changed: ${state.val} (ack = ${state.ack})`);\n\n            if (state.ack == false) {\n                const strFanId = this.ParseFanId(strStateIdentifier);\n\n                if (strFanId) {\n                    const fanData = this.GetFanDataFromConfig(strFanId);\n\n                    if (fanData) {\n                        const data = new WriteDataModel(strFanId, fanData, state.val);\n\n                        switch (strStateIdentifier.split(\".\").pop()) {\n                            case \"boostModeFollowUpTime\":\n                                this.WriteNumberFanData(data, this.oxxify.WriteBoostModeFollowUpTime.bind(this.oxxify));\n                                break;\n\n                            case \"fanOperatingMode\":\n                                this.WriteNumberFanData(data, this.oxxify.WriteOperatingMode.bind(this.oxxify));\n                                break;\n\n                            case \"fanSpeedMode\":\n                                this.WriteNumberFanData(data, this.oxxify.WriteFanSpeedMode.bind(this.oxxify));\n                                break;\n\n                            case \"fanState\":\n                                this.WriteBoolFanData(data, this.oxxify.WriteFanState.bind(this.oxxify));\n                                break;\n\n                            case \"manualFanSpeed\":\n                                this.WriteNumberFanData(data, this.oxxify.WriteManualFanSpeed.bind(this.oxxify));\n                                break;\n\n                            case \"nightModeTimerSetpoint\":\n                                this.WriteStringFanData(\n                                    data,\n                                    this.oxxify.WriteNightModeTimerSetPoint.bind(this.oxxify),\n                                );\n                                break;\n\n                            case \"partyModeTimerSetpoint\":\n                                this.WriteStringFanData(\n                                    data,\n                                    this.oxxify.WritePartyModeTimerSetPoint.bind(this.oxxify),\n                                );\n                                break;\n\n                            case \"resetFilterExchangeCountdown\":\n                                this.WriteVoidFanData(\n                                    data,\n                                    this.oxxify.WriteResetFilterExchangeCountdown.bind(this.oxxify),\n                                );\n                                break;\n\n                            case \"timeControlledMode\":\n                                this.WriteBoolFanData(data, this.oxxify.WriteTimeControlledMode.bind(this.oxxify));\n                                break;\n\n                            case \"timerMode\":\n                                this.WriteNumberFanData(data, this.oxxify.WriteTimerMode.bind(this.oxxify));\n                                break;\n\n                            case \"stateAnalogVoltageSensor\":\n                                this.WriteBoolFanData(\n                                    data,\n                                    this.oxxify.WriteAnalogVoltageSensorState.bind(this.oxxify),\n                                );\n                                break;\n\n                            case \"stateHumiditySensor\":\n                                this.WriteBoolFanData(data, this.oxxify.WriteHumiditySensorState.bind(this.oxxify));\n                                break;\n\n                            case \"stateRelaisSensor\":\n                                this.WriteBoolFanData(data, this.oxxify.WriteRelaisSensorState.bind(this.oxxify));\n                                break;\n\n                            case \"targetAnalogVoltageValue\":\n                                this.WriteNumberFanData(\n                                    data,\n                                    this.oxxify.WriteTargetAnalogVoltageValue.bind(this.oxxify),\n                                );\n                                break;\n\n                            case \"targetHumidityValue\":\n                                this.WriteNumberFanData(data, this.oxxify.WriteTargetHumidityValue.bind(this.oxxify));\n                                break;\n\n                            case \"resetAlarms\":\n                                this.WriteVoidFanData(data, this.oxxify.WriteResetAlarmState.bind(this.oxxify));\n                                break;\n\n                            case \"triggerRtcTimeSync\":\n                                this.SyncRtcClock(strFanId, fanData);\n                                break;\n                        }\n                    }\n                }\n            }\n        } else {\n            // The state was deleted\n            this.log.info(`state ${strStateIdentifier} deleted`);\n        }\n    }\n\n    /**\n     * Method to build up the protocol frame to read all data from the fans according to the protocol.\n     *\n     * @param bIncludeConstData True contains the const data like the firmware and the version, false excludes them.\n     */\n    private ReadAllFanData(bIncludeConstData: boolean): void {\n        this.config.fans.forEach(element => {\n            this.oxxify.StartNewFrame(element.id, element.password);\n            this.oxxify.ReadFanState();\n            this.oxxify.ReadFanSpeedMode();\n            this.oxxify.ReadOperatingMode();\n            this.oxxify.ReadOperatingTime();\n            this.oxxify.ReadBoostState();\n            this.oxxify.ReadBoostModeFollowUpTime();\n            this.oxxify.ReadRtcBattery();\n            this.oxxify.ReadAnalogVoltageSensorState();\n            this.oxxify.ReadAlarmState();\n            this.oxxify.ReadCloudServerEnabled();\n            this.oxxify.ReadHumiditySensorState();\n            this.oxxify.ReadRelaisSensorState();\n            this.oxxify.ReadCurrentAnalogVoltage();\n            this.oxxify.ReadCurrentHumidity();\n            this.oxxify.ReadCurrentRelaisState();\n            this.oxxify.ReadManualFanSpeed();\n            this.oxxify.ReadFan1Speed();\n            this.oxxify.ReadFan2Speed();\n            this.oxxify.ReadFilterExchangeCountdown();\n            this.oxxify.ReadFilterExchangeNecessary();\n            this.oxxify.ReadWifiData();\n            this.oxxify.ReadTimerModeValues();\n            this.oxxify.ReadTargetAnalogVoltageValue();\n            this.oxxify.ReadTargetHumidityValue();\n            this.oxxify.ReadTimeControlledMode();\n            this.oxxify.ReadRtcDateTime();\n            if (bIncludeConstData) {\n                this.oxxify.ReadFanType();\n                this.oxxify.ReadFirmware();\n            }\n            this.oxxify.ReadNightModeTimerSetPoint();\n            this.oxxify.ReadPartyModeTimerSetPoint();\n            this.oxxify.ReadHumiditySensorOverSetPoint();\n            this.oxxify.ReadAnalogVoltageSensorOverSetPoint();\n            this.oxxify.FinishFrame();\n\n            const packet = this.oxxify.ProtocolPacket;\n            this.sendQuene.enqueue(new DataToSend(packet, element.ipaddr));\n        });\n    }\n\n    /**\n     * Parses the fan id from the ioBroker identifer. This fan id has 16 hexadecimal\n     * characters and is added from the end user by the fan configuration.\n     *\n     * @param strId The identifier from ioBroker for the state, that has changed.\n     * @returns The fan id if found or undefined.\n     */\n    private ParseFanId(strId: string): string | undefined {\n        const strFanIdRegex = \"[0-9A-Fa-f]{16}\";\n        const match = strId.match(strFanIdRegex);\n\n        if (match) {\n            return match.toString();\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Fetchs the configured fan data based on the provided identifier.\n     *\n     * @param strFanId The fan identifier, for which the configuration data is requested.\n     * @returns The fan config data if found, otherwise undefined.\n     */\n    private GetFanDataFromConfig(strFanId: string): FanRemoteEndpoint | undefined {\n        const data = this.config.fans.find(f => f.id == strFanId);\n\n        if (data == undefined) {\n            return undefined;\n        }\n\n        return { strIpAddress: data.ipaddr, strPassword: data.password };\n    }\n\n    /**\n     * Generic function to create a protocol frame to write a numeric value to the fan.\n     *\n     * @param data The data to write with necessary fan data as well.\n     * @param writeNumberMethod The function from the OxxifyProtocol class, which adds the data to write.\n     */\n    private WriteNumberFanData(data: WriteDataModel, writeNumberMethod: (nValue: number) => void): void {\n        const nValue = DataHelpers.ParseInputNumber(data.value, this.log);\n\n        if (isNaN(nValue)) {\n            return;\n        }\n\n        this.oxxify.StartNewFrame(data.strFanId, data.fanData.strPassword);\n        writeNumberMethod(nValue);\n        this.oxxify.FinishFrame();\n\n        const packet = this.oxxify.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, data.fanData.strIpAddress));\n    }\n\n    /**\n     * Generic function to create a protocol frame to write a string value to the fan.\n     *\n     * @param data The data to write with necessary fan data as well.\n     * @param writeStringMethod The function from the OxxifyProtocol class, which adds the data to write.\n     */\n    private WriteStringFanData(data: WriteDataModel, writeStringMethod: (strValue: string) => void): void {\n        this.oxxify.StartNewFrame(data.strFanId, data.fanData.strPassword);\n        writeStringMethod(String(data.value));\n        this.oxxify.FinishFrame();\n\n        const packet = this.oxxify.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, data.fanData.strIpAddress));\n    }\n\n    /**\n     * Generic function to create a protocol frame to write a bool value to the fan.\n     *\n     * @param data The data to write with necessary fan data as well.\n     * @param writeStringMethod The function from the OxxifyProtocol class, which adds the data to write.\n     */\n    private WriteBoolFanData(data: WriteDataModel, writeStringMethod: (bValue: boolean) => void): void {\n        if (typeof data.value !== \"boolean\") {\n            this.log.warn(`The value is not from type boolean.`);\n            return;\n        }\n\n        this.oxxify.StartNewFrame(data.strFanId, data.fanData.strPassword);\n        writeStringMethod(Boolean(data.value));\n        this.oxxify.FinishFrame();\n\n        const packet = this.oxxify.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, data.fanData.strIpAddress));\n    }\n\n    /**\n     * Generic function to create a protocol frame to trigger a funtion at the fan. like reseting stuff.\n     *\n     * @param data The data which contains the necessary fan data.\n     * @param writeVoidMethod The function from the OxxifyProtocol class, triggers the function.\n     */\n    private WriteVoidFanData(data: WriteDataModel, writeVoidMethod: () => void): void {\n        this.oxxify.StartNewFrame(data.strFanId, data.fanData.strPassword);\n        writeVoidMethod();\n        this.oxxify.FinishFrame();\n\n        const packet = this.oxxify.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, data.fanData.strIpAddress));\n    }\n\n    /**\n     * Fetchs the current time from the configured NTP server and writes the date and time to the provided fan.\n     *\n     * @param strFanId The fan id, for which the time sync is processed.\n     * @param fanData The related fan data to create the protocol frame.\n     */\n    private SyncRtcClock(strFanId: string, fanData: FanRemoteEndpoint): void {\n        this.ntpClient\n            .syncTime()\n            .then((value: NTP.NTPPacket) => {\n                const dateTime = DateTime.parse(value.time.toISOString(), \"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\", true);\n                this.log.debug(`Received local time via ntp: ${dateTime.toLocaleString()}`);\n                this.oxxify.StartNewFrame(strFanId, fanData.strPassword);\n                this.oxxify.WriteRtcDateTime(dateTime);\n                this.oxxify.FinishFrame();\n\n                const packet = this.oxxify.ProtocolPacket;\n\n                // Immediately send the data, as any delay would make the time sync invalid\n                this.udpServer.send(packet, 4000, fanData.strIpAddress, err => {\n                    if (err != null) {\n                        this.log.error(err.message);\n                    } else {\n                        // Retrigger a reading of the data, as a RTC write does not immediately return the right values\n                        this.oxxify.StartNewFrame(strFanId, fanData.strPassword);\n                        this.oxxify.ReadRtcDateTime();\n                        this.oxxify.FinishFrame();\n\n                        const packet = this.oxxify.ProtocolPacket;\n                        const timeout = this.setTimeout(() => {\n                            this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n                            this.clearTimeout(timeout);\n                        }, 1000);\n                    }\n                });\n            })\n            .catch((reason: any) => {\n                this.log.error(reason);\n            });\n    }\n\n    //#region Protected data members\n\n    udpServer: udp.Socket;\n    oxxify: Oxxify.OxxifyProtocol = new Oxxify.OxxifyProtocol();\n    sendQuene: Queue<DataToSend> = new Queue<DataToSend>();\n    queneInterval: ioBroker.Interval | undefined;\n    pollingInterval: ioBroker.Interval | undefined;\n    ntpClient: NTP.Client = new NTP.Client();\n\n    //#endregion\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new OxxifyFanControl(options);\n} else {\n    // otherwise start the instance directly\n    (() => new OxxifyFanControl())();\n}\n"],
  "mappings": "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",
  "names": ["packet", "Queue"]
}
