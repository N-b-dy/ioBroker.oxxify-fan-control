{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as DateTime from \"date-and-time\";\nimport * as udp from \"dgram\";\nimport * as NTP from \"ntp-time\";\nimport Queue from \"queue-fifo\";\nimport { DataToSend, ReceivedData } from \"./lib/ModelData\";\nimport * as Oxxify from \"./lib/OxxifyProtocol\";\n\ntype FanRemoteEndpoint = { strIpAddress: string; strPassword: string };\n\nclass OxxifyFanControl extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"oxxify-fan-control\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n\n        this.udpServer = udp.createSocket(\"udp4\");\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // Reset the connection indicator during startup\n        await this.setState(\"info.connection\", false, true);\n\n        this.log.debug(`NTP-Server: ${this.config.ntpServer}`);\n        this.log.debug(`Fan data polling invervall: ${this.config.pollingInterval} seconds`);\n\n        this.ntpClient = new NTP.Client(this.config.ntpServer);\n\n        if (typeof this.config.fans == \"undefined\" || this.config.fans.length == 0) {\n            this.log.error(\"Please set at least one vent in the adapter configuration!\");\n            return;\n        }\n\n        await this.extendObject(\"devices\", {\n            type: \"channel\",\n            common: {\n                name: {\n                    en: \"Devices\",\n                    de: \"Ger\u00E4te\",\n                    ru: \"\u0423\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430\",\n                    pt: \"Dispositivos\",\n                    nl: \"Apparaten\",\n                    fr: \"Dispositifs\",\n                    it: \"Dispositivi\",\n                    es: \"Dispositivos\",\n                    pl: \"Urz\u0105dzenia\",\n                    uk: \"\u041F\u0440\u0438\u0441\u0442\u0440\u043E\u0457\",\n                    \"zh-cn\": \"Devices\",\n                },\n                role: undefined,\n            },\n            native: {},\n        });\n\n        const dataDictionary = this.protocolBuilder.DataDictionary;\n\n        this.config.fans.forEach(async (element) => {\n            this.log.debug('Fan configured: \"' + element.name + '\": ' + element.id + \" - \" + element.ipaddr);\n\n            await this.extendObject(\"devices.\" + element.id, {\n                type: \"channel\",\n                common: {\n                    name: element.name,\n                    role: undefined,\n                },\n            });\n\n            dataDictionary.forEach(async (value: Oxxify.FanData) => {\n                await this.extendObject(\"devices.\" + element.id + \".\" + value.strIdentifer, {\n                    type: \"state\",\n                    common: {\n                        name: value.name,\n                        role: value.strRole,\n                        read: true,\n                        write: value.bIsWritable,\n                        type: value.strType,\n                        unit: value.strUnit,\n                        min: value.minValue,\n                        max: value.maxValue,\n                    },\n                });\n            });\n        });\n\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates(\"lights.*\");\n        // Or, if you really must, you can also watch all states. Don\"t do this if you don\"t need to. Otherwise this will cause a lot of unnecessary load on the system:\n        this.subscribeStates(\"devices.*.fan.*\");\n        this.subscribeStates(\"devices.*.sensors.state*\");\n        this.subscribeStates(\"devices.*.sensors.target*\");\n        this.subscribeStates(\"devices.*.system.triggerRtcTimeSync\");\n        this.subscribeStates(\"devices.*.system.resetAlarms\");\n\n        // emits when any error occurs\n        this.udpServer.on(\"error\", (error) => {\n            this.log.error(\"Error: \" + error);\n            this.udpServer.close();\n        });\n\n        // emits on new datagram msg\n        this.udpServer.on(\"message\", async (msg, info) => {\n            // Reset the connection indicator during startup\n            await this.setState(\"info.connection\", true, true);\n\n            this.log.silly(\n                `Received ${msg.length} bytes from ${info.address}:${info.port} - Data: ${msg.toString(\"hex\")}`,\n            );\n            const data = this.protocolBuilder.ParseResponseData(msg);\n\n            if (data.receivedData.length > 0) {\n                data.receivedData.forEach(async (value: ReceivedData) => {\n                    await this.setState(\"devices.\" + data.strFanId + \".\" + value.strIdentifer, value.value, true);\n                });\n            }\n        });\n\n        this.udpServer.bind(4001);\n\n        // emits when socket is ready and listening for datagram msgs\n        this.udpServer.on(\"listening\", async () => {\n            const address = this.udpServer.address();\n            const port = address.port;\n            const family = address.family;\n            const ipaddr = address.address;\n            this.log.debug(\"Server is listening at: \" + ipaddr + \":\" + port + \" (\" + family + \")\");\n\n            this.ReadAllFanData(true);\n        });\n\n        //emits after the socket is closed using socket.close();\n        this.udpServer.on(\"close\", () => {\n            this.log.warn(\"Socket is closed\");\n        });\n\n        this.queneInterval = this.setInterval(() => {\n            if (this.sendQuene.isEmpty() == false) {\n                const sendData = this.sendQuene.dequeue();\n\n                if (sendData != null) {\n                    this.log.silly(\n                        \"Sending \" + sendData.data.toString(\"hex\") + \" to \" + sendData.ipAddress + \":\" + 4000,\n                    );\n                    this.udpServer.send(sendData.data, 4000, sendData.ipAddress, (err) => {\n                        if (err != null) this.log.error(err.message);\n                    });\n                }\n            }\n        }, 25);\n\n        this.pollingInterval = this.setInterval(() => {\n            this.ReadAllFanData(false);\n        }, this.config.pollingInterval * 1000);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            this.clearInterval(this.queneInterval);\n            this.clearInterval(this.pollingInterval);\n\n            this.udpServer.close();\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(strStateIdentifier: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.silly(`state ${strStateIdentifier} changed: ${state.val} (ack = ${state.ack})`);\n\n            if (state.ack == false) {\n                const strFanId = this.ParseFanId(strStateIdentifier);\n\n                if (strFanId) {\n                    const fanData = this.GetFanDataFromConfig(strFanId);\n\n                    if (fanData) {\n                        switch (strStateIdentifier.split(\".\").pop()) {\n                            case \"boostModeFollowUpTime\":\n                                this.WriteBoostModeFollowUpTime(strFanId, fanData, state.val);\n                                break;\n\n                            case \"fanOperatingMode\":\n                                this.WriteOperatingMode(strFanId, fanData, state.val);\n                                break;\n\n                            case \"fanSpeedMode\":\n                                this.WriteFanSpeedMode(strFanId, fanData, state.val);\n                                break;\n\n                            case \"fanState\":\n                                this.WriteFanState(strFanId, fanData, state.val);\n                                break;\n\n                            case \"manualFanSpeed\":\n                                this.WriteManualFanSpeed(strFanId, fanData, state.val);\n                                break;\n\n                            case \"resetFilterExchangeCountdown\":\n                                this.ResetFilterExchangeCountdown(strFanId, fanData);\n                                break;\n\n                            case \"timeControlledMode\":\n                                this.WriteTimeControlledMode(strFanId, fanData, state.val);\n                                break;\n\n                            case \"timerMode\":\n                                this.WriteTimerMode(strFanId, fanData, state.val);\n                                break;\n\n                            case \"stateAnalogVoltageSensor\":\n                                this.WriteAnalogVoltageSensorState(strFanId, fanData, state.val);\n                                break;\n\n                            case \"stateHumiditySensor\":\n                                this.WriteHumiditySensorState(strFanId, fanData, state.val);\n                                break;\n\n                            case \"stateRelaisSensor\":\n                                this.WriteRelaisSensorState(strFanId, fanData, state.val);\n                                break;\n\n                            case \"targetAnalogVoltageValue\":\n                                this.WriteTargetAnalogVoltageValue(strFanId, fanData, state.val);\n                                break;\n\n                            case \"targetHumidityValue\":\n                                this.WriteTargetHumidityValue(strFanId, fanData, state.val);\n                                break;\n\n                            case \"resetAlarms\":\n                                this.ResetAlarms(strFanId, fanData);\n                                break;\n\n                            case \"triggerRtcTimeSync\":\n                                this.SyncRtcClock(strFanId, fanData);\n                                break;\n                        }\n                    }\n                }\n            }\n        } else {\n            // The state was deleted\n            this.log.info(`state ${strStateIdentifier} deleted`);\n        }\n    }\n\n    private ReadAllFanData(bIncludeConstData: boolean): void {\n        this.config.fans.forEach((element) => {\n            this.protocolBuilder.StartNewFrame(element.id, element.password);\n            this.protocolBuilder.ReadFanState();\n            this.protocolBuilder.ReadFanSpeedMode();\n            this.protocolBuilder.ReadOperatingMode();\n            this.protocolBuilder.ReadOperatingTime();\n            this.protocolBuilder.ReadBoostState();\n            this.protocolBuilder.ReadBoostModeFollowUpTime();\n            this.protocolBuilder.ReadRtcBattery();\n            this.protocolBuilder.ReadAnalogVoltageSensorState();\n            this.protocolBuilder.ReadAlarmState();\n            this.protocolBuilder.ReadCloudServerEnabled();\n            this.protocolBuilder.ReadHumiditySensorState();\n            this.protocolBuilder.ReadRelaisSensorState();\n            this.protocolBuilder.ReadCurrentAnalogVoltage();\n            this.protocolBuilder.ReadCurrentHumidity();\n            this.protocolBuilder.ReadCurrentRelaisState();\n            this.protocolBuilder.ReadManualFanSpeed();\n            this.protocolBuilder.ReadFan1Speed();\n            this.protocolBuilder.ReadFan2Speed();\n            this.protocolBuilder.ReadFilterExchangeCountdown();\n            this.protocolBuilder.ReadFilterExchangeNecessary();\n            this.protocolBuilder.ReadWifiData();\n            this.protocolBuilder.ReadTimerModeValues();\n            this.protocolBuilder.ReadTargetAnalogVoltageValue();\n            this.protocolBuilder.ReadTargetHumidityValue();\n            this.protocolBuilder.ReadTimeControlledMode();\n            this.protocolBuilder.ReadRtcDateTime();\n            if (bIncludeConstData) {\n                this.protocolBuilder.ReadFanType();\n                this.protocolBuilder.ReadFirmware();\n            }\n            this.protocolBuilder.FinishFrame();\n\n            const packet = this.protocolBuilder.ProtocolPacket;\n            this.sendQuene.enqueue(new DataToSend(packet, element.ipaddr));\n        });\n    }\n\n    private ParseFanId(strId: string): string | undefined {\n        const strFanIdRegex = \"[0-9A-Fa-f]{16}\";\n        const match = strId.match(strFanIdRegex);\n\n        if (match) {\n            return match.toString();\n        }\n\n        return undefined;\n    }\n\n    private GetFanDataFromConfig(strFanId: string): FanRemoteEndpoint | undefined {\n        const data = this.config.fans.find((f) => f.id == strFanId);\n\n        if (data == undefined) return undefined;\n\n        return { strIpAddress: data.ipaddr, strPassword: data.password };\n    }\n\n    private WriteBoostModeFollowUpTime(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue): void {\n        if (typeof value !== \"number\") {\n            this.log.warn(\"The value is not from type number.\");\n            return;\n        }\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteBoostModeFollowUpTime(Number(value));\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteOperatingMode(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue): void {\n        const nValue = this.ParseInputNumber(value);\n\n        if (isNaN(nValue)) return;\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteOperatingMode(nValue);\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteFanSpeedMode(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue): void {\n        const nValue = this.ParseInputNumber(value);\n\n        if (isNaN(nValue)) return;\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteFanSpeedMode(nValue);\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteFanState(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue): void {\n        if (typeof value !== \"boolean\") {\n            this.log.warn(`The value is not from type boolean.`);\n            return;\n        }\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteFanState(Boolean(value));\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteManualFanSpeed(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue): void {\n        if (typeof value !== \"number\") {\n            this.log.warn(\"The value is not from type number.\");\n            return;\n        }\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteManualFanSpeed(Number(value));\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private ResetFilterExchangeCountdown(strFanId: string, fanData: FanRemoteEndpoint): void {\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteResetFilterExchangeCountdown();\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteTimeControlledMode(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue): void {\n        if (typeof value !== \"boolean\") {\n            this.log.warn(`The value is not from type boolean.`);\n            return;\n        }\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteTimeControlledMode(Boolean(value));\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteTimerMode(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue): void {\n        const nValue = this.ParseInputNumber(value);\n\n        if (isNaN(nValue)) return;\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteTimerMode(nValue);\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteAnalogVoltageSensorState(\n        strFanId: string,\n        fanData: FanRemoteEndpoint,\n        value: ioBroker.StateValue,\n    ): void {\n        if (typeof value !== \"boolean\") {\n            this.log.warn(`The value is not from type boolean.`);\n            return;\n        }\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteAnalogVoltageSensorState(Boolean(value));\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteHumiditySensorState(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue): void {\n        if (typeof value !== \"boolean\") {\n            this.log.warn(`The value is not from type boolean.`);\n            return;\n        }\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteHumiditySensorState(Boolean(value));\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteRelaisSensorState(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue): void {\n        if (typeof value !== \"boolean\") {\n            this.log.warn(`The value is not from type boolean.`);\n            return;\n        }\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteRelaisSensorState(Boolean(value));\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteTargetAnalogVoltageValue(\n        strFanId: string,\n        fanData: FanRemoteEndpoint,\n        value: ioBroker.StateValue,\n    ): void {\n        if (typeof value !== \"number\") {\n            this.log.warn(`The value is not from type number.`);\n            return;\n        }\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteTargetAnalogVoltageValue(Number(value));\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private WriteTargetHumidityValue(strFanId: string, fanData: FanRemoteEndpoint, value: ioBroker.StateValue): void {\n        if (typeof value !== \"number\") {\n            this.log.warn(`The value is not from type number.`);\n            return;\n        }\n\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteTargetHumidityValue(Number(value));\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private ResetAlarms(strFanId: string, fanData: FanRemoteEndpoint): void {\n        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n        this.protocolBuilder.WriteResetAlarmState();\n        this.protocolBuilder.FinishFrame();\n\n        const packet = this.protocolBuilder.ProtocolPacket;\n        this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n    }\n\n    private SyncRtcClock(strFanId: string, fanData: FanRemoteEndpoint): void {\n        this.ntpClient\n            .syncTime()\n            .then((value: NTP.NTPPacket) => {\n                const dateTime = DateTime.parse(value.time.toISOString(), \"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\", true);\n                this.log.debug(\"Received local time via ntp: \" + dateTime.toLocaleString());\n\n                this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n                this.protocolBuilder.WriteRtcDateTime(dateTime);\n                this.protocolBuilder.FinishFrame();\n\n                const packet = this.protocolBuilder.ProtocolPacket;\n\n                // Immediately send the data, as any delay would make the time sync invalid\n                this.udpServer.send(packet, 4000, fanData.strIpAddress, (err) => {\n                    if (err != null) {\n                        this.log.error(err.message);\n                    } else {\n                        // Retrigger a reading of the data, as a RTC write does not immediately return the right values\n                        this.protocolBuilder.StartNewFrame(strFanId, fanData.strPassword);\n                        this.protocolBuilder.ReadRtcDateTime();\n                        this.protocolBuilder.FinishFrame();\n\n                        const packet = this.protocolBuilder.ProtocolPacket;\n                        const timeout = this.setTimeout(() => {\n                            this.sendQuene.enqueue(new DataToSend(packet, fanData.strIpAddress));\n                            this.clearTimeout(timeout);\n                        }, 1000);\n                    }\n                });\n            })\n            .catch((reason: any) => {\n                this.log.error(reason);\n            });\n    }\n\n    private ParseInputNumber(value: ioBroker.StateValue): number {\n        if (typeof value !== \"number\" && typeof value !== \"string\") {\n            this.log.warn(`The value is not from type number or string, but ${typeof value}`);\n            return NaN;\n        }\n\n        let nValue = Number(value);\n\n        if (typeof value === \"string\") {\n            nValue = parseInt(value);\n\n            // Give it a second try, if it was not parsable -> check for the first space as separating character\n            if (isNaN(nValue)) nValue = parseInt(String(value).substring(0, String(value).indexOf(\" \")));\n\n            if (isNaN(nValue)) {\n                this.log.warn(`Unable to parse the number from the input value: ${value}`);\n            }\n        }\n\n        return nValue;\n    }\n\n    //#region Protected data members\n\n    udpServer: udp.Socket;\n    protocolBuilder: Oxxify.OxxifyProtocol = new Oxxify.OxxifyProtocol();\n    sendQuene: Queue<DataToSend> = new Queue<DataToSend>();\n    queneInterval: ioBroker.Interval | undefined;\n    pollingInterval: ioBroker.Interval | undefined;\n    ntpClient: NTP.Client = new NTP.Client();\n\n    //#endregion\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new OxxifyFanControl(options);\n} else {\n    // otherwise start the instance directly\n    (() => new OxxifyFanControl())();\n}\n"],
  "mappings": "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",
  "names": ["packet", "Queue"]
}
