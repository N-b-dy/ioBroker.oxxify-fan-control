{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as DateTime from \"date-and-time\";\nimport * as udp from \"dgram\";\nimport * as NTP from \"ntp-time\";\nimport Queue from \"queue-fifo\";\nimport { DataHelpers } from \"./lib/DataHelpers\";\nimport {\n    DataToSend,\n    type FanData,\n    type FanRemoteEndpoint,\n    type IoBrokerDataPoint,\n    IoBrokerRewriteDataPoint,\n    ParsingStatus,\n    WriteDataModel,\n} from \"./lib/ModelData\";\nimport * as Oxxify from \"./lib/OxxifyProtocol\";\n\n/**\n * The main class for this adapter.\n */\nclass OxxifyFanControl extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"oxxify-fan-control\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n\n        this.udpServer = udp.createSocket(\"udp4\");\n        this.udpServerErrorCount = 0;\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator during startup\n        await this.setState(\"info.connection\", false, true);\n\n        this.log.debug(`NTP-Server: ${this.config.ntpServer}`);\n        this.log.debug(`Fan data polling invervall: ${this.config.pollingInterval} seconds`);\n\n        this.ntpClient = new NTP.Client(this.config.ntpServer);\n\n        if (typeof this.config.fans == \"undefined\" || this.config.fans.length == 0) {\n            this.log.error(\"Please set at least one fan in the adapter configuration!\");\n            return;\n        }\n\n        await this.extendObject(\"devices\", {\n            type: \"folder\",\n            common: {\n                name: {\n                    en: \"Devices\",\n                    de: \"Ger\u00E4te\",\n                    ru: \"\u0423\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430\",\n                    pt: \"Dispositivos\",\n                    nl: \"Apparaten\",\n                    fr: \"Dispositifs\",\n                    it: \"Dispositivi\",\n                    es: \"Dispositivos\",\n                    pl: \"Urz\u0105dzenia\",\n                    uk: \"\u041F\u0440\u0438\u0441\u0442\u0440\u043E\u0457\",\n                    \"zh-cn\": \"Devices\",\n                },\n                role: undefined,\n            },\n            native: {},\n        });\n\n        const stateDictionary = this.oxxify.StateDictionary;\n\n        // Collect all available configured devices within a list to find the no longer configured ones\n        const availableObjects = await this.getDevicesAsync();\n        let missingDevices: Array<string> = [];\n\n        availableObjects.forEach(device => {\n            const parts = device._id.split(\".\");\n            const lastPart = parts[parts.length - 1];\n            missingDevices.push(lastPart);\n        });\n\n        await Promise.all(\n            this.config.fans.map(async element => {\n                const strCheckedId = this.RemoveInvalidCharacters(element.id);\n\n                this.log.debug(`Fan configured: \"${element.name}\": ${strCheckedId} - ${element.ipaddr}`);\n\n                await this.extendObject(`devices.${strCheckedId}`, {\n                    type: \"device\",\n                    common: {\n                        name: element.name,\n                        role: undefined,\n                    },\n                });\n\n                await this.extendObject(`devices.${strCheckedId}.${Oxxify.OxxifyProtocol.FanFolder}`, {\n                    type: \"channel\",\n                    common: {\n                        name: {\n                            en: \"fans\",\n                            de: \"L\u00FCfter\",\n                            ru: \"\u0432\u0435\u043D\u0442\u0438\u043B\u044F\u0442\u043E\u0440\u044B\",\n                            pt: \"f\u00E3s\",\n                            nl: \"ventilatoren\",\n                            fr: \"fans\",\n                            it: \"tifosi\",\n                            es: \"ventiladores\",\n                            pl: \"fani\",\n                            uk: \"\u0448\u0430\u043D\u0443\u0432\u0430\u043B\u044C\u043D\u0438\u043A\u0438\",\n                            \"zh-cn\": \"fans\",\n                        },\n                        role: undefined,\n                    },\n                });\n\n                await this.extendObject(`devices.${strCheckedId}.${Oxxify.OxxifyProtocol.NetworkFolder}`, {\n                    type: \"channel\",\n                    common: {\n                        name: {\n                            en: \"Network\",\n                            de: \"Netzwerk\",\n                            ru: \"\u0421\u0435\u0442\u044C\",\n                            pt: \"Rede\",\n                            nl: \"Netwerk\",\n                            fr: \"R\u00E9seau\",\n                            it: \"Rete\",\n                            es: \"Red\",\n                            pl: \"Sie\u0107\",\n                            uk: \"\u041C\u0435\u0440\u0435\u0436\u0430\",\n                            \"zh-cn\": \"Network\",\n                        },\n                        role: undefined,\n                    },\n                });\n\n                await this.extendObject(`devices.${strCheckedId}.${Oxxify.OxxifyProtocol.SensorsFolder}`, {\n                    type: \"channel\",\n                    common: {\n                        name: {\n                            en: \"Sensors\",\n                            de: \"Sensoren\",\n                            ru: \"\u0414\u0430\u0442\u0447\u0438\u043A\u0438\",\n                            pt: \"Sensores\",\n                            nl: \"Sensoren\",\n                            fr: \"Capteurs\",\n                            it: \"Sensori\",\n                            es: \"Sensores\",\n                            pl: \"Czujniki\",\n                            uk: \"\u0414\u0430\u0442\u0447\u0438\u043A\u0438\",\n                            \"zh-cn\": \"Sensors\",\n                        },\n                        role: undefined,\n                    },\n                });\n\n                await this.extendObject(`devices.${strCheckedId}.${Oxxify.OxxifyProtocol.SystemFolder}`, {\n                    type: \"channel\",\n                    common: {\n                        name: {\n                            en: \"System\",\n                            de: \"System\",\n                            ru: \"\u0421\u0438\u0441\u0442\u0435\u043C\u0430\",\n                            pt: \"Sistema\",\n                            nl: \"Systeem\",\n                            fr: \"Syst\u00E8me\",\n                            it: \"Sistema\",\n                            es: \"Sistema\",\n                            pl: \"System\",\n                            uk: \"\u0421\u0438\u0441\u0442\u0435\u043C\u0430\",\n                            \"zh-cn\": \"System\",\n                        },\n                        role: undefined,\n                    },\n                });\n\n                stateDictionary.forEach(async (value: FanData) => {\n                    await this.extendObject(`devices.${strCheckedId}.${value.strIdentifer}`, {\n                        type: \"state\",\n                        common: {\n                            name: value.name,\n                            role: value.strRole,\n                            read: value.bIsReadable,\n                            write: value.bIsWritable,\n                            type: value.strType,\n                            unit: value.strUnit,\n                            min: value.minValue,\n                            max: value.maxValue,\n                            states: value.states,\n                        },\n                    });\n                });\n\n                // Remove the configured fans from the avaialble ones in the object tree\n                missingDevices = missingDevices.filter(d => d != strCheckedId);\n            }),\n        );\n\n        // Remove any no longer available objects in the config\n        if (this.supportsFeature && this.supportsFeature(\"ADAPTER_DEL_OBJECT_RECURSIVE\")) {\n            missingDevices.forEach(async missingDeviceId => {\n                this.log.info(\n                    `Objects and states regarding missing device ${this.namespace}.devices.${missingDeviceId} are deleted now.`,\n                );\n                await this.delObjectAsync(`devices.${missingDeviceId}`, { recursive: true });\n            });\n        }\n\n        // Subscribing to the states on the root level, parsing of relevent data is in method onStateChange()\n        this.subscribeStates(\"devices.*\");\n\n        // Emits when any error occurs\n        this.udpServer.on(\"error\", error => {\n            this.log.error(`Error: ${error}`);\n            this.udpServer.close();\n\n            this.udpServerErrorCount++;\n\n            // give it some retrys before exiting\n            if (this.udpServerErrorCount < 3) {\n                this.udpServer.bind(4001);\n            } else {\n                this.log.error(\n                    `This adapter had ${this.udpServerErrorCount} errors regarding the listening of the udp server to port 4001. Adapter is terminated now.`,\n                );\n\n                if (typeof this.terminate === \"function\") {\n                    this.terminate();\n                } else {\n                    process.exit();\n                }\n            }\n        });\n\n        // Emits on new datagram msg\n        this.udpServer.on(\"message\", async (msg, info) => {\n            // Reset the connection indicator during startup\n            await this.setState(\"info.connection\", true, true);\n\n            this.log.silly(\n                `Received ${msg.length} bytes from ${info.address}:${info.port} - Data: ${msg.toString(\"hex\")}`,\n            );\n\n            const data = this.oxxify.ParseResponseData(msg);\n\n            if (data.status !== ParsingStatus.Ok) {\n                this.log.warn(\n                    `Received frame from IP ${info.address} could not be parsed. Parsing status ${data.status} - data ${msg.toString(\"hex\")}`,\n                );\n            } else {\n                if (data.receivedData.length > 0) {\n                    data.receivedData.forEach(async (dataPoint: IoBrokerDataPoint) => {\n                        await this.setState(\n                            `devices.${data.strFanId}.${dataPoint.strIdentifer}`,\n                            dataPoint.value,\n                            true,\n                        );\n                    });\n                }\n            }\n        });\n\n        this.udpServer.bind(4001);\n\n        // emits when socket is ready and listening for datagram msgs\n        this.udpServer.on(\"listening\", () => {\n            const address = this.udpServer.address();\n            const port = address.port;\n            const family = address.family;\n            const ipaddr = address.address;\n            this.log.debug(`Server is listening at: ${ipaddr}:${port} (${family})`);\n\n            this.ReadAllFanData(true);\n        });\n\n        //emits after the socket is closed using socket.close();\n        this.udpServer.on(\"close\", () => {\n            this.log.warn(\"Socket is closed\");\n        });\n\n        // Limit the configured polling interval to the min/max values from json config\n        let nPollingInterval = this.config.pollingInterval;\n\n        if (nPollingInterval <= 1) {\n            nPollingInterval = 1;\n        }\n\n        if (nPollingInterval > 86400) {\n            nPollingInterval = 86400;\n        }\n\n        this.pollingInterval = this.setInterval(() => {\n            this.ReadAllFanData(false);\n        }, nPollingInterval * 1000);\n    }\n\n    /**\n     * Is called when adapter shuts down.\n     *\n     * @param callback The callback, which has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            this.clearTimeout(this.queneTimeout);\n            this.clearInterval(this.pollingInterval);\n\n            this.udpServer.close();\n\n            callback();\n        } catch (e: any) {\n            this.log.error(e.toString());\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes. Here the subscribed states are dispatched for the\n     * dedicated actions regarding the fans.\n     *\n     * @param strStateIdentifier The state which has changed.\n     * @param state The new value including meta data from ioBroker.\n     */\n    private onStateChange(strStateIdentifier: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.silly(`state ${strStateIdentifier} changed: ${state.val} (ack = ${state.ack})`);\n\n            if (state.ack == false) {\n                const strFanId = this.ParseFanId(strStateIdentifier);\n\n                if (strFanId) {\n                    this.ProcessStateChange(strFanId, strStateIdentifier, state.val);\n                }\n            }\n        } else {\n            // The state was deleted\n            this.log.info(`state ${strStateIdentifier} deleted`);\n        }\n    }\n\n    private ProcessStateChange(strFanId: string, strStateIdentifier: string, value: ioBroker.StateValue): void {\n        const fanData = this.GetFanDataFromConfig(strFanId);\n\n        if (fanData) {\n            const data = new WriteDataModel(strFanId, fanData, strStateIdentifier, value);\n\n            switch (strStateIdentifier.split(\".\").pop()) {\n                case \"boostModeFollowUpTime\":\n                    this.WriteNumberFanData(data, this.oxxify.WriteBoostModeFollowUpTime.bind(this.oxxify));\n                    break;\n\n                case \"fanOperatingMode\":\n                    this.WriteStringFanData(data, this.oxxify.WriteOperatingMode.bind(this.oxxify));\n                    break;\n\n                case \"fanSpeedMode\":\n                    this.WriteStringFanData(data, this.oxxify.WriteFanSpeedMode.bind(this.oxxify));\n                    break;\n\n                case \"fanState\":\n                    this.WriteBoolFanData(data, this.oxxify.WriteFanState.bind(this.oxxify));\n                    break;\n\n                case \"manualFanSpeed\":\n                    this.WriteNumberFanData(data, this.oxxify.WriteManualFanSpeed.bind(this.oxxify));\n                    break;\n\n                case \"nightModeTimerSetpoint\":\n                    this.WriteStringFanData(data, this.oxxify.WriteNightModeTimerSetPoint.bind(this.oxxify));\n                    break;\n\n                case \"partyModeTimerSetpoint\":\n                    this.WriteStringFanData(data, this.oxxify.WritePartyModeTimerSetPoint.bind(this.oxxify));\n                    break;\n\n                case \"resetFilterExchangeCountdown\":\n                    this.WriteVoidFanData(data, this.oxxify.WriteResetFilterExchangeCountdown.bind(this.oxxify));\n                    break;\n\n                case \"timeControlledMode\":\n                    this.WriteBoolFanData(data, this.oxxify.WriteTimeControlledMode.bind(this.oxxify));\n                    break;\n\n                case \"timerMode\":\n                    this.WriteStringFanData(data, this.oxxify.WriteTimerMode.bind(this.oxxify));\n                    break;\n\n                case \"stateAnalogVoltageSensor\":\n                    this.WriteBoolFanData(data, this.oxxify.WriteAnalogVoltageSensorState.bind(this.oxxify));\n                    break;\n\n                case \"stateHumiditySensor\":\n                    this.WriteBoolFanData(data, this.oxxify.WriteHumiditySensorState.bind(this.oxxify));\n                    break;\n\n                case \"stateRelaisSensor\":\n                    this.WriteBoolFanData(data, this.oxxify.WriteRelaisSensorState.bind(this.oxxify));\n                    break;\n\n                case \"targetAnalogVoltageValue\":\n                    this.WriteNumberFanData(data, this.oxxify.WriteTargetAnalogVoltageValue.bind(this.oxxify));\n                    break;\n\n                case \"targetHumidityValue\":\n                    this.WriteNumberFanData(data, this.oxxify.WriteTargetHumidityValue.bind(this.oxxify));\n                    break;\n\n                case \"resetAlarms\":\n                    this.WriteVoidFanData(data, this.oxxify.WriteResetAlarmState.bind(this.oxxify));\n                    break;\n\n                case \"triggerRtcTimeSync\":\n                    this.SyncRtcClock(strFanId, fanData);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Method to build up the protocol frame to read all data from the fans according to the protocol.\n     *\n     * @param bIncludeConstData True contains the const data like the firmware and the version, false excludes them.\n     */\n    private ReadAllFanData(bIncludeConstData: boolean): void {\n        this.config.fans.forEach(element => {\n            const strCheckedId = this.RemoveInvalidCharacters(element.id);\n\n            this.oxxify.StartNewFrame(strCheckedId, element.password);\n            this.oxxify.ReadFanState();\n            this.oxxify.ReadFanSpeedMode();\n            this.oxxify.ReadOperatingMode();\n            this.oxxify.ReadOperatingTime();\n            this.oxxify.ReadBoostState();\n            this.oxxify.ReadBoostModeFollowUpTime();\n            this.oxxify.ReadRtcBattery();\n            this.oxxify.ReadAnalogVoltageSensorState();\n            this.oxxify.ReadAlarmState();\n            this.oxxify.ReadCloudServerEnabled();\n            this.oxxify.ReadHumiditySensorState();\n            this.oxxify.ReadRelaisSensorState();\n            this.oxxify.ReadCurrentAnalogVoltage();\n            this.oxxify.ReadCurrentHumidity();\n            this.oxxify.ReadCurrentRelaisState();\n            this.oxxify.ReadManualFanSpeed();\n            this.oxxify.ReadFan1Speed();\n            this.oxxify.ReadFan2Speed();\n            this.oxxify.ReadFilterExchangeCountdown();\n            this.oxxify.ReadFilterExchangeNecessary();\n            this.oxxify.ReadWifiData();\n            this.oxxify.ReadTimerModeValues();\n            this.oxxify.ReadTargetAnalogVoltageValue();\n            this.oxxify.ReadTargetHumidityValue();\n            this.oxxify.ReadTimeControlledMode();\n            this.oxxify.ReadRtcDateTime();\n            if (bIncludeConstData) {\n                this.oxxify.ReadFanType();\n                this.oxxify.ReadFirmware();\n            }\n            this.oxxify.ReadNightModeTimerSetPoint();\n            this.oxxify.ReadPartyModeTimerSetPoint();\n            this.oxxify.ReadHumiditySensorOverSetPoint();\n            this.oxxify.ReadAnalogVoltageSensorOverSetPoint();\n            this.oxxify.FinishFrame();\n\n            const packet = this.oxxify.ProtocolPacket;\n            this.SendData(new DataToSend(packet, element.ipaddr));\n        });\n    }\n\n    /**\n     * Parses the fan id from the ioBroker identifer. This fan id has 16 hexadecimal\n     * characters and is added from the end user by the fan configuration.\n     *\n     * @param strId The identifier from ioBroker for the state, that has changed.\n     * @returns The fan id if found or undefined.\n     */\n    private ParseFanId(strId: string): string | undefined {\n        const strFanIdRegex = \"[0-9A-Fa-f]{16}\";\n        const match = strId.match(strFanIdRegex);\n\n        if (match) {\n            return match.toString();\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Fetchs the configured fan data based on the provided identifier.\n     *\n     * @param strFanId The fan identifier, for which the configuration data is requested.\n     * @returns The fan config data if found, otherwise undefined.\n     */\n    private GetFanDataFromConfig(strFanId: string): FanRemoteEndpoint | undefined {\n        const data = this.config.fans.find(f => f.id == strFanId);\n\n        if (data == undefined) {\n            return undefined;\n        }\n\n        return { strIpAddress: data.ipaddr, strPassword: data.password };\n    }\n\n    /**\n     * Generic function to create a protocol frame to write a numeric value to the fan.\n     *\n     * @param data The data to write with necessary fan data as well.\n     * @param writeNumberMethod The function from the OxxifyProtocol class, which adds the data to write.\n     */\n    private WriteNumberFanData(\n        data: WriteDataModel,\n        writeNumberMethod: (nValue: number) => Oxxify.ParameterType,\n    ): void {\n        const nValue = DataHelpers.ParseInputNumber(data.value, this.log);\n\n        if (isNaN(nValue)) {\n            return;\n        }\n\n        this.oxxify.StartNewFrame(data.strFanId, data.fanData.strPassword);\n        const eParameterType = writeNumberMethod(nValue);\n        this.oxxify.FinishFrame();\n\n        this.SetInternalTargetValue(data, eParameterType);\n\n        const packet = this.oxxify.ProtocolPacket;\n        this.SendData(new DataToSend(packet, data.fanData.strIpAddress));\n    }\n\n    /**\n     * Generic function to create a protocol frame to write a string value to the fan.\n     *\n     * @param data The data to write with necessary fan data as well.\n     * @param writeStringMethod The function from the OxxifyProtocol class, which adds the data to write.\n     */\n    private WriteStringFanData(\n        data: WriteDataModel,\n        writeStringMethod: (strValue: string) => Oxxify.ParameterType,\n    ): void {\n        this.oxxify.StartNewFrame(data.strFanId, data.fanData.strPassword);\n        const eParameterType = writeStringMethod(String(data.value));\n        this.oxxify.FinishFrame();\n\n        this.SetInternalTargetValue(data, eParameterType);\n\n        const packet = this.oxxify.ProtocolPacket;\n        this.SendData(new DataToSend(packet, data.fanData.strIpAddress));\n    }\n\n    /**\n     * Generic function to create a protocol frame to write a bool value to the fan.\n     *\n     * @param data The data to write with necessary fan data as well.\n     * @param writeBoolMethod The function from the OxxifyProtocol class, which adds the data to write.\n     */\n    private WriteBoolFanData(data: WriteDataModel, writeBoolMethod: (bValue: boolean) => Oxxify.ParameterType): void {\n        if (typeof data.value !== \"boolean\") {\n            this.log.warn(`The value is not from type boolean.`);\n            return;\n        }\n\n        this.oxxify.StartNewFrame(data.strFanId, data.fanData.strPassword);\n        const eParameterType = writeBoolMethod(Boolean(data.value));\n        this.oxxify.FinishFrame();\n\n        this.SetInternalTargetValue(data, eParameterType);\n\n        const packet = this.oxxify.ProtocolPacket;\n        this.SendData(new DataToSend(packet, data.fanData.strIpAddress));\n    }\n\n    /**\n     * Generic function to create a protocol frame to trigger a funtion at the fan. like reseting stuff.\n     *\n     * @param data The data which contains the necessary fan data.\n     * @param writeVoidMethod The function from the OxxifyProtocol class, triggers the function.\n     */\n    private WriteVoidFanData(data: WriteDataModel, writeVoidMethod: () => void): void {\n        this.oxxify.StartNewFrame(data.strFanId, data.fanData.strPassword);\n        writeVoidMethod();\n        this.oxxify.FinishFrame();\n\n        const packet = this.oxxify.ProtocolPacket;\n        this.SendData(new DataToSend(packet, data.fanData.strIpAddress));\n    }\n\n    /**\n     * Sets the requested value to an internal multi-dimensional dictionary to cross-check within the polling timer,\n     * if the requested value is already set. UDP is not that reliable as TCP, so this is a kind of safety mechanism\n     * to ensure the requested value is wirtten sucessfully.\n     *\n     * @param data The data which contains the necessary fan data.\n     * @param eParameterType The parameter type, which is related to the fan data.\n     */\n    private SetInternalTargetValue(data: WriteDataModel, eParameterType: Oxxify.ParameterType): void {\n        if (this.targetValuesDictionary.has(data.strFanId) == false) {\n            this.targetValuesDictionary.set(data.strFanId, new Map<Oxxify.ParameterType, IoBrokerRewriteDataPoint>());\n        }\n\n        const fanDataMap = this.targetValuesDictionary.get(data.strFanId);\n\n        if (fanDataMap != undefined) {\n            if (fanDataMap.has(eParameterType) == false) {\n                fanDataMap.set(eParameterType, new IoBrokerRewriteDataPoint(data.strStateIdentifier, data.value));\n            }\n\n            const fanData = fanDataMap.get(eParameterType);\n\n            if (fanData != undefined) {\n                // Reset the retry counter on value change\n                if (data.value != fanData.value) {\n                    fanData.nRetryCount = 0;\n                }\n\n                fanData.value = data.value;\n            }\n        }\n    }\n\n    /**\n     * Fetchs the current time from the configured NTP server and writes the date and time to the provided fan.\n     *\n     * @param strFanId The fan id, for which the time sync is processed.\n     * @param fanData The related fan data to create the protocol frame.\n     */\n    private SyncRtcClock(strFanId: string, fanData: FanRemoteEndpoint): void {\n        this.ntpClient\n            .syncTime()\n            .then((value: NTP.NTPPacket) => {\n                const dateTime = DateTime.parse(value.time.toISOString(), \"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\", true);\n                this.log.debug(`Received local time via ntp: ${dateTime.toLocaleString()}`);\n                this.oxxify.StartNewFrame(strFanId, fanData.strPassword);\n                this.oxxify.WriteRtcDateTime(dateTime);\n                this.oxxify.FinishFrame();\n\n                const packet = this.oxxify.ProtocolPacket;\n\n                // Immediately send the data, as any delay would make the time sync invalid\n                this.udpServer.send(packet, 4000, fanData.strIpAddress, err => {\n                    if (err != null) {\n                        this.log.error(err.message);\n                    } else {\n                        // Retrigger a reading of the data, as a RTC write does not immediately return the right values\n                        this.oxxify.StartNewFrame(strFanId, fanData.strPassword);\n                        this.oxxify.ReadRtcDateTime();\n                        this.oxxify.FinishFrame();\n\n                        const packet = this.oxxify.ProtocolPacket;\n                        const timeout = this.setTimeout(() => {\n                            this.SendData(new DataToSend(packet, fanData.strIpAddress));\n                            this.clearTimeout(timeout);\n                        }, 1000);\n                    }\n                });\n            })\n            .catch((reason: any) => {\n                this.log.error(reason);\n            });\n    }\n\n    /**\n     * Replaces the invalid characters from the provided input variable. If any is found, it is\n     * replaced with underscore character \"_\".\n     *\n     * @param strUserInput The string to be checked for invalid characters.\n     * @returns The input string with all invalid characters replaced.\n     */\n    private RemoveInvalidCharacters(strUserInput: string): string {\n        return (strUserInput || \"\").replace(this.FORBIDDEN_CHARS, \"_\");\n    }\n\n    /**\n     * Adds the provided data to the send quene and starts the timeout for sending it.\n     *\n     * @param data The data which is added to the send quene.\n     */\n    private SendData(data: DataToSend): void {\n        this.sendQuene.enqueue(data);\n\n        if (this.queneTimeout == undefined) {\n            this.queneTimeout = this.setTimeout(() => {\n                this.ProcessSendQuene();\n            }, 50);\n        }\n    }\n\n    /**\n     * Checks if any data is available within the send quene and sends it. If there is any data left, the\n     * method retriggers itself within a timeout, if there is some data left in the quene.\n     */\n    private ProcessSendQuene(): void {\n        if (this.sendQuene.isEmpty() == false) {\n            const sendData = this.sendQuene.dequeue();\n\n            if (sendData != null) {\n                this.log.silly(`Sending ${sendData.data.toString(\"hex\")} to ${sendData.ipAddress}:${4000}`);\n                this.udpServer.send(sendData.data, 4000, sendData.ipAddress, err => {\n                    if (err != null) {\n                        this.log.error(err.message);\n                    }\n                });\n            }\n        }\n\n        this.clearTimeout(this.queneTimeout);\n        this.queneTimeout = undefined;\n\n        if (this.sendQuene.isEmpty() == false) {\n            // Avoid recreating a timeout, if it was already defined\n            if (this.queneTimeout == undefined) {\n                this.queneTimeout = this.setTimeout(() => {\n                    this.ProcessSendQuene();\n                }, 20);\n            }\n        } else {\n            // The send quene is empty, trigger a recheck of the internally buffered values against the currently acknowledged ones\n            if (this.verifyTargetValuesTimeout == undefined) {\n                this.verifyTargetValuesTimeout = this.setTimeout(() => {\n                    this.verifyTargetValues();\n                }, 2500);\n            }\n        }\n    }\n\n    private verifyTargetValues(): void {\n        this.targetValuesDictionary.forEach(\n            (targetFanData: Map<Oxxify.ParameterType, IoBrokerRewriteDataPoint>, strFanId: string) => {\n                targetFanData.forEach(async (dataPoint: IoBrokerRewriteDataPoint) => {\n                    const currentState = await this.getStateAsync(dataPoint.strIdentifer);\n\n                    if (currentState?.val != dataPoint.value) {\n                        if (dataPoint.nRetryCount <= this.nMaxRetryCount) {\n                            dataPoint.nRetryCount++;\n\n                            if (dataPoint.nRetryCount > this.nMaxRetryCount) {\n                                this.log.warn(\n                                    `Unable to write state ${dataPoint.strIdentifer} to new value ${dataPoint.value} (current value: ${currentState?.val}) after ${dataPoint.nRetryCount - 1} retrys. No further attempt is made to write the value.`,\n                                );\n                            } else {\n                                this.ProcessStateChange(strFanId, dataPoint.strIdentifer, dataPoint.value);\n                                this.log.info(\n                                    `Writing fan value retriggerd: State: ${dataPoint.strIdentifer} - Value: ${dataPoint.value} - Try ${dataPoint.nRetryCount}`,\n                                );\n                            }\n                        }\n                    } else {\n                        dataPoint.nRetryCount = 0;\n                    }\n                });\n            },\n        );\n\n        this.clearTimeout(this.verifyTargetValuesTimeout);\n        this.verifyTargetValuesTimeout = undefined;\n    }\n\n    //#region Protected data members\n\n    udpServer: udp.Socket;\n    udpServerErrorCount: number;\n    oxxify: Oxxify.OxxifyProtocol = new Oxxify.OxxifyProtocol();\n    sendQuene: Queue<DataToSend> = new Queue<DataToSend>();\n    queneTimeout: ioBroker.Timeout | undefined = undefined;\n    verifyTargetValuesTimeout: ioBroker.Timeout | undefined = undefined;\n    pollingInterval: ioBroker.Interval | undefined;\n    ntpClient: NTP.Client = new NTP.Client();\n    nMaxRetryCount: number = 3;\n\n    // Store the requested state changes here to add an generic repeat mechanism in case it is not set or responded properly\n    targetValuesDictionary: Map<string, Map<Oxxify.ParameterType, IoBrokerRewriteDataPoint>> = new Map<\n        string,\n        Map<Oxxify.ParameterType, IoBrokerRewriteDataPoint>\n    >();\n\n    //#endregion\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new OxxifyFanControl(options);\n} else {\n    // otherwise start the instance directly\n    (() => new OxxifyFanControl())();\n}\n"],
  "mappings": "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",
  "names": ["packet", "Queue"]
}
